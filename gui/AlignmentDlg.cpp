/*******************************************************************
Autor:         Jinfeng Chen
E-mail:        jinfengcc@gmail.com
Date:          09-29-2015
Description:   Create a dialog for technicians for tracey machine alignment.
This Dialog will be generated by clicking 'ctrl+q' in main interface of software.

*****************************************************************************************/


//***************************************************************************************

#include "StdAfx.h"
#include "Resource.h"
#include "FirmwareToolDlg.h"
#include "Settings.h"
#include "BusyCursor.h"
#include "AODToolDlg.h"
#include "QuickWFDlg.h"
#include "RingsToolDlg.h"
#include "VideoToolDlg.h"
#include "Video2ToolDlg.h"
#include "WFAcquisition.h"
#include "WFAcquisitionDlg.h"
#include "WFVrfTestDlg.h"

#include "AlignmentDlg.h"

//***************************************************************************************
//***************************************************************************************
//***************************************************************************************
//***************************************************************************************

BEGIN_MESSAGE_MAP(CAlignmentDlg, CDialog)

	ON_BN_CLICKED(IDC_CAL_FIRMWARE_TOOL, OnFirmwareToolButtonClicked)
	ON_BN_CLICKED(IDC_CAL_LOAD, OnLoadButtonClicked)
	ON_BN_CLICKED(IDC_CAL_SAVE, OnSaveButtonClicked)
	ON_BN_CLICKED(IDC_CAL_RESTORE, OnRestoreButtonClicked)
	ON_BN_CLICKED(IDC_CAL_BACKUP, OnBackupButtonClicked)

	ON_BN_CLICKED(IDC_WF_ENABLE_PROBING_CHECK, OnProbingButtonClicked)
	ON_BN_CLICKED(IDC_ACCOMM_TARGET_LIGHT_ON_CHECK, OnTargetLightBtnClicked)

	ON_BN_CLICKED(IDC_CAL_AOD_TOOL, OnAODToolButtonClicked)
	ON_BN_CLICKED(IDC_WF_CAL_BTN, OnVideoQkWFExamBtnClicked)
	ON_BN_CLICKED(IDC_CAL_RINGS_TOOL, OnRingsToolButtonClicked)
	ON_BN_CLICKED(IDC_MONO_TOOL, OnMonoToolButtonClicked)//OnVideoToolButtonClicked
	ON_BN_CLICKED(IDC_COLOR_VIDEO_TOOL, OnColorButtonClicked)//OnVideo2ToolButtonClicked

	ON_BN_CLICKED(IDC_OPTOMETER_CHECK2, OnOptometerCheckClicked)

	ON_BN_CLICKED(IDC_CAMERA_TOOL, OnCameraAliBtnClicked)

END_MESSAGE_MAP()

//***************************************************************************************

CAlignmentDlg::CAlignmentDlg(CHW* pHW, CALIBRATION* pCalibration, CWnd* pParentWnd) : CDialog(IDD_ALIGNMENT_DLG, pParentWnd)
{
	m_pHW = pHW;
	m_pCalibration = pCalibration;
}

//***************************************************************************************

void CAlignmentDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);

	DDX_Control(pDX, IDOK, m_OKButton);

	DDX_Control(pDX, IDC_CAL_LOAD, m_LoadButton);
	DDX_Control(pDX, IDC_CAL_SAVE, m_SaveButton);
	DDX_Control(pDX, IDC_CAL_RESTORE, m_RestoreButton);
	DDX_Control(pDX, IDC_CAL_BACKUP, m_BackupButton);

	DDX_Control(pDX, IDC_CAL_GUID_EDIT, m_GUIDEdit);
	DDX_Control(pDX, IDC_CAL_SERIAL_EDIT, m_SerialEdit);
	DDX_Control(pDX, IDC_CAL_DATE_EDIT, m_DateEdit);
	DDX_Control(pDX, IDC_CAL_TIME_EDIT, m_TimeEdit);
	DDX_Control(pDX, IDC_CAL_FIRMWARE_TOOL, m_FirmwareToolButton);

	DDX_Control(pDX, IDC_CAL_AOD_TOOL, m_AODToolButton);
	DDX_Control(pDX, IDC_WF_CAL_BTN, m_WFCalButton);
	DDX_Control(pDX, IDC_CAL_RINGS_TOOL, m_RingsToolButton);
	DDX_Control(pDX, IDC_MONO_TOOL, m_MonoButton);
	DDX_Control(pDX, IDC_COLOR_VIDEO_TOOL, m_ColorVideoButton);
	DDX_Control(pDX, IDC_CAMERA_TOOL, m_CameraAliButton);

	DDX_Control(pDX, IDC_CAL_FLIP_AODX_CHECK, m_FlipAODXCheck);
	DDX_Control(pDX, IDC_CAL_AODX_HZ_UM_EDIT2, m_AODXFreq0Edit);
	DDX_Control(pDX, IDC_CAL_AODX_HZ_UM_EDIT, m_AODXHzUmEdit);
	DDX_Control(pDX, IDC_CAL_AODX_RMS_EDIT, m_AODXRMSEdit);
	DDX_Control(pDX, IDC_CAL_FLIP_AODY_CHECK, m_FlipAODYCheck);
	DDX_Control(pDX, IDC_CAL_AODY_FREQ0_EDIT, m_AODYFreq0Edit);
	DDX_Control(pDX, IDC_CAL_AODY_HZ_UM_EDIT2, m_AODYHzUmEdit);
	DDX_Control(pDX, IDC_CAL_AODY_RMS_EDIT, m_AODYRMSEdit);

	DDX_Control(pDX, IDC_CAL_EXP_TIME_EDIT, m_LADExpTimeEdit);
	DDX_Control(pDX, IDC_CAL_SWAP_LADS_CHECK, m_SwapLADsCheck);
	DDX_Control(pDX, IDC_CAL_FLIP_LADX_CHECK, m_FlipLADXCheck);
	DDX_Control(pDX, IDC_CAL_F_X_EDIT, m_LADXFocalDistanceEdit);
	DDX_Control(pDX, IDC_CAL_FLIP_LADY_CHECK, m_FlipLADYCheck);
	DDX_Control(pDX, IDC_CAL_F_Y_EDIT, m_LADYFocalDistanceEdit);
	DDX_Control(pDX, IDC_OPTOMETER_CHECK2, m_OptometerCheck);
	DDX_Control(pDX, IDC_OPT_ENABLE_TEXT, m_Opt_Enable_Text);

	DDX_Control(pDX, IDC_CAL_C3_EDIT, m_C3Edit);
	DDX_Control(pDX, IDC_CAL_C4_EDIT, m_C4Edit);
	DDX_Control(pDX, IDC_CAL_C5_EDIT, m_C5Edit);

	DDX_Control(pDX, IDC_WF_ENABLE_PROBING_CHECK, m_ProbingEnabledCheck);
	DDX_Control(pDX, IDC_WF_ENABLE_FOGGING_CHECK, m_FoggingEnabledCheck);
	DDX_Control(pDX, IDC_ACCOMM_TARGET_LIGHT_ON_CHECK, m_AccommTargetLightOnCheck);
	DDX_Control(pDX, IDC_TARGETTIME_EDIT, m_TargetTimeEdit);
	DDX_Control(pDX, IDC_TT_STATIC, m_TargetTimeLabel);
	DDX_Control(pDX, IDC_WF_MANUAL_SCAN_D_EDIT, m_ManualScanDiameterEdit);
	DDX_Control(pDX, IDC_WF_AUTO_SCAN_D_EDIT, m_AutoScanDiameterEdit);
}

//***************************************************************************************

BOOL CAlignmentDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	m_pCalibration = &m_pHW->m_Calibration;
	SetDlgData();
	m_OKButton.SetFocus();

	return FALSE;
}

//***************************************************************************************

void CAlignmentDlg::OnCancel()
{
	m_pHW->CancelCalibrationChanges();

	CDialog::OnCancel();
}

//***************************************************************************************

void CAlignmentDlg::OnOK()
{
	//Save to settings
	CString s;

	::Settings.m_ProbingEnabled = m_ProbingEnabledCheck.GetCheck();
	::Settings.m_FoggingEnabled = ::Settings.m_ProbingEnabled && m_FoggingEnabledCheck.GetCheck();
	::Settings.m_AccommTargetLightOff = !m_AccommTargetLightOnCheck.GetCheck();

	m_TargetTimeEdit.GetWindowText(s);
	G_As = s;
	::Settings.m_AccommTargetLightTime = atoi(G_As);

	m_ManualScanDiameterEdit.GetWindowText(s);
	G_As = s;
	::Settings.m_ManualScanDiameterUm = (int)RealRound(atof(G_As) * 1000.0, 100.0);
	if (::Settings.m_ManualScanDiameterUm < 2000) ::Settings.m_ManualScanDiameterUm = 2000;
	else if (::Settings.m_ManualScanDiameterUm > 8000) ::Settings.m_ManualScanDiameterUm = 8000;

	m_AutoScanDiameterEdit.GetWindowText(s);
	G_As = s;
	::Settings.m_AutoScanDiameterUm = (int)RealRound(atof(G_As) * 1000.0, 100.0);
	if (::Settings.m_AutoScanDiameterUm < 2000) ::Settings.m_AutoScanDiameterUm = 2000;
	else if (::Settings.m_AutoScanDiameterUm > 8000) ::Settings.m_AutoScanDiameterUm = 8000;
	//Save to settings done

	if (m_pHW->HasCalibrationChanged()) {
		::Warning("Calibration settings have been changed.\nYou need to save them into EEPROM first.");
		return;
	}

	CDialog::OnOK();
}

//***************************************************************************************

void CAlignmentDlg::SetDlgData()
{
	CString s;

	// GUID
	CString guid;
	::GUIDToStr(m_pCalibration->CalibrationID, guid);
	m_GUIDEdit.SetWindowText(guid);
	// Serial number
	s = m_pCalibration->HardwareSerial;
	m_SerialEdit.SetWindowText(s);
	// Date
	s.Format(_T("%04i-%02i-%02i"), m_pCalibration->Time.wYear, m_pCalibration->Time.wMonth, m_pCalibration->Time.wDay);
	m_DateEdit.SetWindowText(s);
	// Time
	s.Format(_T("%02i:%02i"), m_pCalibration->Time.wHour, m_pCalibration->Time.wMinute);
	m_TimeEdit.SetWindowText(s);



	// AODX flip
	m_FlipAODXCheck.SetCheck(!m_pCalibration->AODXNoFlip);
	// AODX frequency 0
	s.Format(_T("%i"), m_pCalibration->AODX.Freq0);
	m_AODXFreq0Edit.SetWindowText(s);
	// AODX Hz per Um
	s.Format(_T("%i"), m_pCalibration->AODX.HzUm);
	m_AODXHzUmEdit.SetWindowText(s);
	// AODX RMS
	s.Format(_T("%i"), m_pCalibration->AODX.RMS);
	m_AODXRMSEdit.SetWindowText(s);
	// AODY flip
	m_FlipAODYCheck.SetCheck(!m_pCalibration->AODYNoFlip);
	// AODY frequency 0
	s.Format(_T("%i"), m_pCalibration->AODY.Freq0);
	m_AODYFreq0Edit.SetWindowText(s);
	// AODY Hz per Um
	s.Format(_T("%i"), m_pCalibration->AODY.HzUm);
	m_AODYHzUmEdit.SetWindowText(s);
	// AODY RMS
	s.Format(_T("%i"), m_pCalibration->AODY.RMS);
	m_AODYRMSEdit.SetWindowText(s);

	// LADs exposure time
	s.Format(_T("%i"), m_pCalibration->LADExposureTime);
	m_LADExpTimeEdit.SetWindowText(s);
	// LADs swap
	m_SwapLADsCheck.SetCheck(m_pCalibration->LADSwapXY);
	// LADX flip
	m_FlipLADXCheck.SetCheck(!m_pCalibration->LADXNoFlip);
	// LADX focal distance
	s.Format(_T("%.0f"), m_pCalibration->LADXFocalDistance);
	m_LADXFocalDistanceEdit.SetWindowText(s);
	// LADY flip
	m_FlipLADYCheck.SetCheck(!m_pCalibration->LADYNoFlip);
	// LADY focal distance
	s.Format(_T("%.0f"), m_pCalibration->LADYFocalDistance);
	m_LADYFocalDistanceEdit.SetWindowText(s);

	// Optometer enabled
	m_OptometerCheck.SetCheck(m_pCalibration->OptometerEnabled == 1 ? 1 : 0);
	if (m_OptometerCheck.GetCheck()) m_Opt_Enable_Text.SetWindowText(_T("Enabled"));
	else m_Opt_Enable_Text.SetWindowText(_T("Disabled"));

	// Zernike C3
	s.Format(_T("%.3f"), m_pCalibration->Zernike.C3);
	m_C3Edit.SetWindowText(s);
	// Zernike C4
	s.Format(_T("%.3f"), m_pCalibration->Zernike.C4);
	m_C4Edit.SetWindowText(s);
	// Zernike C5
	s.Format(_T("%.3f"), m_pCalibration->Zernike.C5);
	m_C5Edit.SetWindowText(s);

	//WF Exam acquisition
	m_ProbingEnabledCheck.SetCheck(::Settings.m_ProbingEnabled);
	m_FoggingEnabledCheck.SetCheck(::Settings.m_ProbingEnabled && ::Settings.m_FoggingEnabled);
	m_FoggingEnabledCheck.EnableWindow(::Settings.m_ProbingEnabled);
	m_AccommTargetLightOnCheck.SetCheck(!::Settings.m_AccommTargetLightOff);

	if (::Settings.m_AccommTargetLightOff)
	{
		m_TargetTimeEdit.ShowWindow(SW_HIDE);
	}
	else
	{
		m_TargetTimeEdit.ShowWindow(SW_SHOW);

		s.Format(_T("%i"), ::Settings.m_AccommTargetLightTime);
		m_TargetTimeEdit.SetWindowText(s);
	}

	s.Format(_T("%.1f"), ::Settings.m_ManualScanDiameterUm * 0.001);
	m_ManualScanDiameterEdit.SetWindowText(s);

	  
	s.Format(_T("%.1f"), ::Settings.m_AutoScanDiameterUm * 0.001);
	m_AutoScanDiameterEdit.SetWindowText(s);
	//Done
}

//***************************************************************************************

void CAlignmentDlg::GetDlgData()
{
	CString s;

	// Serial number
	m_SerialEdit.GetWindowText(s);
	G_As = s;
	strncpy(m_pCalibration->HardwareSerial, G_As, sizeof(m_pCalibration->HardwareSerial));
	m_pCalibration->HardwareSerial[sizeof(m_pCalibration->HardwareSerial) - 1] = 0;

	// AODX flip
	m_pCalibration->AODXNoFlip = !m_FlipAODXCheck.GetCheck();
	// AODX frequency 0
	m_AODXFreq0Edit.GetWindowText(s);
	G_As = s;
	m_pCalibration->AODX.Freq0 = atoi(G_As);
	// AODX Hz per Um
	m_AODXHzUmEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->AODX.HzUm = atoi(G_As);
	// AODX RMS
	m_AODXRMSEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->AODX.RMS = atoi(G_As);
	// AODY flip
	m_pCalibration->AODYNoFlip = !m_FlipAODYCheck.GetCheck();
	// AODY frequency 0
	m_AODYFreq0Edit.GetWindowText(s);
	G_As = s;
	m_pCalibration->AODY.Freq0 = atoi(G_As);
	// AODY Hz per Um
	m_AODYHzUmEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->AODY.HzUm = atoi(G_As);
	// AODY RMS
	m_AODYRMSEdit.GetWindowText(s);
	m_pCalibration->AODY.RMS = atoi(G_As);

	// LADs exposure time
	m_LADExpTimeEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->LADExposureTime = atoi(G_As);
	// LADs swap
	m_pCalibration->LADSwapXY = m_SwapLADsCheck.GetCheck();
	// LADX flip
	m_pCalibration->LADXNoFlip = !m_FlipLADXCheck.GetCheck();
	// LADX focal distance
	m_LADXFocalDistanceEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->LADXFocalDistance = atof(G_As);
	// LADY flip
	m_pCalibration->LADYNoFlip = !m_FlipLADYCheck.GetCheck();
	// LADY focal distance
	m_LADYFocalDistanceEdit.GetWindowText(s);
	G_As = s;
	m_pCalibration->LADYFocalDistance = atof(G_As);

	// Optometer enabled
	m_pCalibration->OptometerEnabled = m_OptometerCheck.GetCheck() ? 1 : 0;

	// Zernike C3
	m_C3Edit.GetWindowText(s);
	G_As = s;
	m_pCalibration->Zernike.C3 = atof(G_As);
	// Zernike C4
	m_C4Edit.GetWindowText(s);
	G_As = s;
	m_pCalibration->Zernike.C4 = atof(G_As);
	// Zernike C5
	m_C5Edit.GetWindowText(s);
	G_As = s;
	m_pCalibration->Zernike.C5 = atof(G_As);
}

//***************************************************************************************

void CAlignmentDlg::OnFirmwareToolButtonClicked()
{
	CFirmwareToolDlg* pDlg = new CFirmwareToolDlg(m_pHW, this);
	if (pDlg->DoModal() == IDOK) {
	}
	delete pDlg;
}
//***************************************************************************************

void CAlignmentDlg::OnLoadButtonClicked()
{
	CBusyCursor Cursor;

	if (m_pHW->LoadCalibrationFromFlash()) {
		SetDlgData();
	}
}

//***************************************************************************************

void CAlignmentDlg::OnSaveButtonClicked()
{
	CBusyCursor Cursor;

	GetDlgData();

	if (m_pHW->SaveCalibrationIntoFlash()) {
		SetDlgData(); // to show new GUID, date & time
	}
}


//***************************************************************************************

void CAlignmentDlg::OnRestoreButtonClicked()
{
	CString FolderName(MAIN_DIR + "\\Cal");
	::CreateDirectory(FolderName, NULL);

	CFileDialog* pDlg = new CFileDialog(TRUE, _T("cal"), _T(""), OFN_HIDEREADONLY, _T("Calibration files (*.cal)|*.cal||"), this);
	pDlg->m_ofn.lpstrTitle = LPCWSTR("Load settings from a file");
	pDlg->m_ofn.lpstrInitialDir = FolderName;
	if (pDlg->DoModal() == IDOK) {
		if (m_pHW->LoadCalibrationFromFile(pDlg->GetPathName())) {
			SetDlgData();
		}
	}
	delete pDlg;
}

//***************************************************************************************

void CAlignmentDlg::OnBackupButtonClicked()
{
	CString FolderName = MAIN_DIR + "\\Cal";
	::CreateDirectory(FolderName, NULL);

	CString s;
	::GUIDToStr(m_pCalibration->CalibrationID, s);
	CString FileName = FolderName + "\\" + s + ".cal";

	CFileDialog* pDlg = new CFileDialog(FALSE, _T("cal"), FileName, OFN_OVERWRITEPROMPT, _T("Calibration files (*.cal)|*.cal||"), this);
	pDlg->m_ofn.lpstrTitle = LPCWSTR("Save settings into a file");
	pDlg->m_ofn.lpstrInitialDir = FolderName;
	if (pDlg->DoModal() == IDOK) {
		GetDlgData();
		m_pHW->SaveCalibrationIntoFile(pDlg->GetPathName());
	}
	delete pDlg;
}

//***************************************************************************************

void CAlignmentDlg::OnProbingButtonClicked()
{
	m_FoggingEnabledCheck.SetCheck(m_ProbingEnabledCheck.GetCheck() && m_FoggingEnabledCheck.GetCheck());
	m_FoggingEnabledCheck.EnableWindow(m_ProbingEnabledCheck.GetCheck());
}

//***************************************************************************************

void CAlignmentDlg::OnTargetLightBtnClicked()
{
	if (m_AccommTargetLightOnCheck.GetCheck())
	{
		m_TargetTimeEdit.ShowWindow(SW_SHOW);
		m_TargetTimeLabel.ShowWindow(SW_SHOW);

		CString s;
		s.Format(_T("%i"), ::Settings.m_AccommTargetLightTime);
		m_TargetTimeEdit.SetWindowText(s);
	}
	else
	{
		m_TargetTimeEdit.ShowWindow(SW_HIDE);
		m_TargetTimeLabel.ShowWindow(SW_HIDE);
	}
}
//***************************************************************************************

void CAlignmentDlg::OnAODToolButtonClicked()
{
	GetDlgData();

	CAODToolDlg* pDlg = new CAODToolDlg(m_pHW, this);

	if (pDlg->DoModal() == IDOK) 
	{
		SetDlgData();
	}

	delete pDlg;
}
//***************************************************************************************

void CAlignmentDlg::OnVideoQkWFExamBtnClicked()
{
	real_t backC3 = m_pCalibration->Zernike.C3;
	real_t backC4 = m_pCalibration->Zernike.C4;
	real_t backC5 = m_pCalibration->Zernike.C5;
	int  backExposureTime = m_pCalibration->LADExposureTime;
	BOOL backLADSwapXY = m_pCalibration->LADSwapXY;
	BOOL backADXNoFlip = m_pCalibration->LADXNoFlip;
	real_t backLADXFocalDistance = m_pCalibration->LADXFocalDistance;
	BOOL backLADYNoFlip = m_pCalibration->LADYNoFlip;
	real_t backLADYFocalDistance = m_pCalibration->LADYFocalDistance;
	int  backOptometerEnabled = m_pCalibration->OptometerEnabled;

	GetDlgData();//610 1

	CQuickWFDlg* pQuickWFDlg = new CQuickWFDlg(&::HW, m_pCalibration, this);
	BOOL Res = pQuickWFDlg->DoModal() == IDOK;

	delete pQuickWFDlg;

	if (Res)
	{
		CString s;

		// Zernike C3
		s.Format(_T("%.3f"), m_pCalibration->Zernike.C3);
		m_C3Edit.SetWindowText(s);
		// Zernike C4
		s.Format(_T("%.3f"), m_pCalibration->Zernike.C4);
		m_C4Edit.SetWindowText(s);
		// Zernike C5
		s.Format(_T("%.3f"), m_pCalibration->Zernike.C5);
		m_C5Edit.SetWindowText(s);

		// LADs exposure time
		s.Format(_T("%i"), m_pCalibration->LADExposureTime);
		m_LADExpTimeEdit.SetWindowText(s);

		// LADs swap
		m_SwapLADsCheck.SetCheck(m_pCalibration->LADSwapXY);
		// LADX flip
		m_FlipLADXCheck.SetCheck(!m_pCalibration->LADXNoFlip);
		// LADX focal distance
		s.Format(_T("%.0f"), m_pCalibration->LADXFocalDistance);
		m_LADXFocalDistanceEdit.SetWindowText(s);
		// LADY flip
		m_FlipLADYCheck.SetCheck(!m_pCalibration->LADYNoFlip);
		// LADY focal distance
		s.Format(_T("%.0f"), m_pCalibration->LADYFocalDistance);
		m_LADYFocalDistanceEdit.SetWindowText(s);

		m_OptometerCheck.SetCheck(m_pCalibration->OptometerEnabled == 1 ? 1 : 0);
	}

	m_pCalibration->Zernike.C3 = backC3;
	m_pCalibration->Zernike.C4 = backC4;
	m_pCalibration->Zernike.C5 = backC5;
	m_pCalibration->LADExposureTime = backExposureTime;
	m_pCalibration->LADSwapXY = backLADSwapXY;
	m_pCalibration->LADXNoFlip = backADXNoFlip;
	m_pCalibration->LADXFocalDistance = backLADXFocalDistance;
	m_pCalibration->LADYNoFlip = backLADYNoFlip;
	m_pCalibration->LADYFocalDistance = backLADYFocalDistance;
	m_pCalibration->OptometerEnabled = backOptometerEnabled;
	//Done
}

//***************************************************************************************

void CAlignmentDlg::OnRingsToolButtonClicked()
{
	::NewSettings.m_Adjust_CT = TRUE;

	GetDlgData();

	CCTAcquisition* pCTAcquisition = new CCTAcquisition(m_pHW, 1);

	CRingsToolDlg* pDlg = new CRingsToolDlg(pCTAcquisition, 0, this);
	if (pDlg->DoModal() == IDOK) {
		SetDlgData();
	}
	delete pDlg;

	delete pCTAcquisition;

	::NewSettings.m_Adjust_CT = FALSE;
}

//***************************************************************************************

void CAlignmentDlg::OnMonoToolButtonClicked()
{
	GetDlgData();

	CVideoToolDlg* pDlg = new CVideoToolDlg(m_pHW, this);

	if (pDlg->DoModal() == IDOK) 
	{
		SetDlgData();
	}

	delete pDlg;
}
//***************************************************************************************

void CAlignmentDlg::OnColorButtonClicked()
{
	GetDlgData();

	CVideo2ToolDlg* pDlg = new CVideo2ToolDlg(m_pHW, this);

	if (pDlg->DoModal() == IDOK) 
	{
		SetDlgData();
	}

	delete pDlg;
}

//***************************************************************************************

void CAlignmentDlg::OnOptometerCheckClicked()
{
	BOOL Checked = m_OptometerCheck.GetCheck();
	m_OptometerCheck.SetCheck(Checked);

	if (m_OptometerCheck.GetCheck())
	{
		m_Opt_Enable_Text.SetWindowText(_T("Enabled"));
	}
	else
	{
		m_Opt_Enable_Text.SetWindowText(_T("Disabled"));
	}
}

//***************************************************************************************

void CAlignmentDlg::OnCameraAliBtnClicked()
{
A:	BOOL BackUpSuperExamSetting = ::NewSettings.m_Super_Exam;
	::NewSettings.m_Super_Exam = FALSE;

	CWFAcquisition* pWFAcquisition = new CWFAcquisition(&::HW, &::Settings, FALSE);

	CWFAcquisitionDlg* pWFAcquisitionDlg = new CWFAcquisitionDlg(this, pWFAcquisition, FALSE);

	BOOL Res = pWFAcquisitionDlg->DoModal() == IDOK;

	::NewSettings.m_Super_Exam = BackUpSuperExamSetting;

	if (Res)
	{
		m_pWFExam = new CWFExam;
		*m_pWFExam = pWFAcquisition->m_WFExam;
	}
	delete pWFAcquisition;
	delete pWFAcquisitionDlg;

	if (!Res) return;

	m_pWFExam->Process();
	
	//Show the exam vrf window
	CWFVrfTestDlg*  WFVrfTestDlg = new CWFVrfTestDlg(this, m_pWFExam);

	Res = WFVrfTestDlg->DoModal() == IDOK;

	delete WFVrfTestDlg;
	WFVrfTestDlg = NULL;

	if (Res)
	{
		goto A;
	}
}

//***************************************************************************************
